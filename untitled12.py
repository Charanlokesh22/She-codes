# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-fMcjWD6wGZFcPNujZyiRKzWxuwRGF0d
"""

pip install telebot requests

pip install --upgrade telebot

pip install tenacity

pip install pyTelegramBotAPI requests tenacity google-cloud-texttospeech

pip install pyTelegramBotAPI requests gtts tenacity

!pip install pyTelegramBotAPI

pip install pyTelegramBotAPI openai

pip install openai

pip install openai==0.28

pip install retry

pip show retry

import os
import telebot
import openai
from requests.exceptions import ConnectionError
from retry import retry  # Install using: pip install retry

# Telegram bot token (replace with your bot token)
BOT_TOKEN = 'YOUR_BOT_TOKEN'

# OpenAI API key (replace with your OpenAI API key)
openai.api_key = 'YOUR_OPENAI_API_KEY'

# Initialize Telegram Bot
bot = telebot.TeleBot(BOT_TOKEN)

# Retry decorator with exponential backoff
@retry(ConnectionError, delay=2, backoff=2, max_delay=30)
def call_openai_api(user_message):
    response = openai.Completion.create(
        engine="davinci",  # You can use any OpenAI model here
        prompt=user_message,
        max_tokens=100
    )
    return response

# Handler for /start command
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.reply_to(message, "Hi! I'm a bot that can answer your questions. Send me a question!")

# Handler for text messages
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_message = message.text

    # Call OpenAI API to generate a response with retry mechanism
    try:
        response = call_openai_api(user_message)
        answer = response.choices[0].text.strip()
    except ConnectionError as e:
        answer = f"Sorry, I couldn't process that request due to a network error. Please try again later."
    except Exception as e:
        answer = f"Sorry, I couldn't process that request. Error: {str(e)}"

    # Send the response back to the user
    bot.reply_to(message, answer)

# Run the bot
if __name__ == "__main__":
    bot.polling()